												Composite Implimentation Overview
													
														 Participants
	
		- Component
			- Declares the interface for objects in the composition.
			- Implements default behavior for the interface common to all classes.
			- Declares an interface for accessing and managing its child components.
		
		- Leaf
			- represents leaf objects in the composition.
				- A leaf has no children.
			- Defines behavior for primitive objects in the composition.
			
		- Composite
			- Defines Behavior for components having children (add, remove, etc).
			- Stores child components (some data structure, list ??).
			- Implements child-related operations in the Component interface.
		
		- Client
			- Manipulates objects in the composition through the Component interface (does the grouping).
			
															Usage

		- A client uses the component class interface to interact with objects in the composition structure.
		
		- If recipient is a leaf then request is handled directly.
		
		- If recipient is a composite, then it usually forwards request to its child components.
			- Also may perform additional operations before and after forwarding.
			
															TradeOff	
		
		- This pattern focuses on transparency and does not strictly follow the single Responsibility design principle.
		
		- Whether an element is a composite or leaf node is transparent to the client.
			- The component interface is allowed to contain the child management operations and the leaf operations
				(add, remove, and shared operation).
			- Allows a client to treat both composites and leaf nodes uniformly.
			- **Violates the single responsibility principle and the segregate interface principle**.
				- We have both types of operations in the component class.
					- We lose a bit of safety because a client might try to do something
						innapropriate or meaningless on an element
							(add or remove on a leaf object itself instead of the composite).
		
		- This is a design decision.
		
		- We could take the design in the other direction and separate out the responsibilities into interfaces.
			- Make our own design safer.
				- Any inapropriate calls on elements would be caught at compile time or runtime.
					- We would lose transparency and our code would have to use conditionals and the instanceof operator.
		
		- This is a classic case of a tradeoff.
		
		- We are guided by design principles, but we always need to observe the effect they have on our designs.
		
		- Sometimes we purposely do things in a way that seems to violate a principle.
			- However, this is a matter of perspective.
				- It might seem incorrect to have child management operations in the leaf nodes (like add(), remove() and getChild()).
				- Then again you can always shift your perspective and see a leaf as a node with zero children.
				
															Summary
															
		- Defines class hierarchies consisting of primitive objects and composite objects.
		
		- Primitive objects can be composed into more complex objects.
			- Whenever client code expects a primitive object, it can alo take a composite object.
		
		- Clients can treat compossite structures and individual objects uniformly.
			- Clients do not know whether they are dealing with a leaf or a composite component.
			- Simplifies client code, because it avoids having to write case-statement-style functions
				over the classes that define the composition.
				
		- Newly defined composite or leaf subclasses work automatically with existing structures
			and client code.
			- Clients do not have to be changed for new component classes.
		
		
			
																