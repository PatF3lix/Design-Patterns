											  Section 22
										Command Design Pattern Implementation
		
		*Overview*
		
	- Remember, requests are encapsulated as objects
	
	- Four terms are associated with the implimentation of this pattern
		- invoker, client, command, and receiver
	
	- A command object is capable of calling a particular method in the receiver
	
	- An invoker only knows about the command interface
		- It is totally unaware about the concrete commands
	
	- The client objects holds the invoker object and the command object(s)
		- The client decides which of these commands needs to execute at a particular point in time
	
		*Participants*
	
	- Command
		
		- Declares an interface for all commands
		- A command is invoked through its execute method
			- Will ask receiver to perform action
		- May include an undo() method
	
	- ConcreteCommand
		
		- Defines a binding between a receiver object and an action
		- Invoker makes a request by calling execute() and this class carries it out by calling one or more actions on the receiver
	
	- Client
		
		- Creates a ConcreteCommand object and sets its receiver
	
	- Invoker	
	
		- Asks the command to carry out the request by calling its execute() method
	
	- Receiver
	
		- Knows how to perform the work needed to carry out a request
		- Any class may serve as a Receiver
	
		*Workflow*
	
	- The client creates a ConcreteCommand object and specifies its receiver
		-  Creates the receiver object as well and then attaches it to the Command( in the constructor)
	
	- An Invoker object stores the ConcreteCommand object
		- Client creates the invoker object and attaches the command object (in the constructor)
			- May also instead just pass the command to the execute method
	
	- The invoker issues a request by calling Execute, using the command object(previously attached or passed in
		as a parameter to execute)
		- When commands are undoable, ConcreteCommand stores state for undoing the command prior to invoking Execute
	
	- When client program executes the action (via the invoker), it is processed based on the command and receiver object
		- The ConcreteCommand object invokes the approriate method on its receiver to carry out the specific request
	
		*Implementation details*
	
	- The command decouples the object that invokes the operation from the one that knows how to perform it
	
	- Command are first-class objects
		- Can be manipulated and extended like any other object
	
	- Command objects can be:
		- Dumb
			- Delegates the required action to a receiver object
		
		- Smart
			- Implements everything itself without delegating to a receiver object
	
	- Pattern is easily extendible
		- We can add new action methods in receivers and create new Command implementations without changing the clinet code
	
	- One drawback is that the code gets huge and confusing with high number of action methods
		- You end up with a lot of small classes
	
		*Summary*
	
	- The Command object is the core of command design pattern that defines the contrat for implimentation
	
	- Receiver implementation is separate from command implementation
	
	- Command implementation classes choose the method to invoke on receiver object
		- For every method in receiver there will be a command implementation
			- Works as a bridge between receiver and action methods
	
	- Invoker class just forwards the request from the client to the command object
	
	- Client is responsible for instantiating the invoker object and receiver objects and then associating them together
		
	- Client is also responsible for instantiating invoker object and associating command object
		with it and executing the action method