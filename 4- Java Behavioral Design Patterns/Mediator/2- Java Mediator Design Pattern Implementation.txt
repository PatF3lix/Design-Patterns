											  Section 25
										Mediator Design Pattern Implementation
		
		*Participants*
		
	- Mediator
		- Defines an interface for communicating with colleague objects
	
	- ConcreteMediator
		- Implements cooperative behavior by coordinating Colleague objects
		- Knows and maintains its colleagues
	
	- Colleague classes
		- Each colleague class knows its Mediator object 
		- Each colleague communicates with its mediator whenever it would have otherwise communicated
			with another colleague
	
	- Colleagues send and receive requests from a Mediator object
		- Mediator implements the cooperative behavior by routing request between the appropriate colleages
	
	- The system objects that communicate with each other are called Colleagues
		- Usually we have an interface or abstract class that provides the contract for the communication and
			then we have concrete implementation of mediators
			
	- No need to define an abstract Mediator class when colleagues work with only one mediator
	
		- The abstract coupling that the Mediator class provides lets colleagues work with different Mediator subclasses,
			and vice versa
	
	- Colleagues have to communicate with their mediator when an event of interest occurs.
		- One approach is to implement the Mediator as an Observer
		- Colleague classes act as Subjects
			- Send notifications to the mediator whenever they change state
				- mediator responds by propagating the effects of the change to other colleagues
	
	- The implementation limits sub-classing
		- A mediator localizes behavior that otherwise would be distributed among several objects
		- Changing this behavior requires subclassing Mediator only
			- Colleague classes can be reused as is
	
	- It decouples colleagues
		- A mediator promotes loose coupling between colleagues
		- You can vary reuse Collegue and Mediator classes independently
	
	- It simplifies object protocols
		- Replaces many to many interactions with one-to-many interactions between the mediator and its colleagues
	
	- One to many relationships are easier to understand, maintain, and extend
	
	- It abstracts how objects cooperate
		- Making mediation an independent concept and encapsulating it in an object lets you
			focus on how objects interact apart from their individual behavior
				- Can help clarify how objects interact in a system
	
	- It centralizes control
		- Trades complexity of interaction for complexity in the mediator
			- A mediator can become more complex than any individual colleague
			- Can make the mediator itself a monolith that is hard to maintain
	