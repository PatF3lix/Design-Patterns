											  Section 27
										Observer Design Pattern 
		
		*Overview*
		
	- The observer pattern defines a one-to-many dependency between objects so that when one object changes state,
		all of its dependents are notified and updated automatically
		
	- Many objects need to be notified whenever an event occurs and want to be notified automatically
		- However, I do not want to change the broadcasting object everytime there is a change to the set of objects 
			listening to the broadcast 
			- Would be like having to change a radio transmitter every time a new car radio comes to twon
			- Want to decouple the notify-ers and the notify-ees
			- This is what the observer pattern solves
	
	- In this pattern, there are many observers (objects) which are observing a particular subject (object)
		- Observers register themselves to a subject and are automatically notified when the subject changes
			- When they lose interest in the subject they simply unresgister from the subject
	
	- Provides a loosely coupled design between objects that interact 
		- More flexibility with changing requirements
	
	- One of the most common patterns that is ued in software development
	
	Example
		
	- A great example is how newspapers or magazines subscriptions work
	
	- A newspaper publisher goes into business and begins publishing newspapers
		- You subscribe to a particular publisher, abd every time there is a new edition it gets delivered to you
			- As long as you remain a subscriber, you get new newspapers
	
	- You unsubscribe when you don't want papers anymore
		- They stop being delivered
	
	- While the publisher remains in business, people, hotels, airlines,
		and other businesses constantly subscribe and unsubscribe to the newspaper
	
	- Consider a simple UI-based example, where the UI is connected with some databse
		- A user can execute some query through that UI and after searching the database, the result is reflected back in the UI
		- If a change occurs in the database, the UI sould be notified so that it can update its display according 
			to the change
	
	- Heavily used in GUI toolkits and event listeners
		- The button (subject) and onClickListener (Observer) are modelled with observer pattern
	
	- Social media , RSS feeds, email subscriptions in which you have the option to follow or subscribe and you receive
		the latest notification
	
	- All users of an app on the google play store get notified if there is an update
	
		*One-to-many Relationship*
	
	- The Observer pattern defines a one-to-many relationship between a set of objects
		- When the state of one object changes, all of its dependents are notified
	
	- The subject and observers are dependent define the one-to-many relationship
		- Observers are dependent on the subject such that when the subject's state changes, the observers get notified
		
			*When to use this pattern?*
	
	- When a change to one object requires changing others, and you don't know how many objects need to be changed
	
	- When multiple objects are dependent on the state of one object
	
	- When an object should be able to notify other objects without making assumptions about who these objects are
		- You don't want these objects tightly coupled